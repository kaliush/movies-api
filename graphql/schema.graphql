"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    movies(
        search: String @rules(apply: ["string", "min:1"])
        type: MovieType
        year: Int @rules(apply: ["integer", "digits:4"])
        page: Int @rules(apply: ["integer", "min:1"])
    ): [Movie!]! @field(resolver: "App\\GraphQL\\Queries\\MovieQuery@resolve")
}


"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Mutation {
    fetchMovies(
        search: String! @rules(apply: ["required", "string", "min:1"])
        type: MovieType! @rules(apply: ["required", "in:movie,series,episode"])
        page: Int! @rules(apply: ["required", "integer", "min:1"])
    ): [Movie!]! @field(resolver: "App\\GraphQL\\Mutations\\MovieMutator@fetch")

    updateMovie(
        imdbID: ID! @rules(apply: ["required", "exists:movies,imdbID"])
        type: MovieType @rules(apply: ["nullable"])
        released: String @rules(apply: ["nullable", "date_format:Y-m-d"])
        year: Int @rules(apply: ["nullable", "integer", "digits:4"])
        poster: String @rules(apply: ["nullable", "url"])
        genre: String @rules(apply: ["nullable", "string"])
        runtime: String @rules(apply: ["nullable", "string"])
        country: String @rules(apply: ["nullable", "string"])
        imdbRating: Float @rules(apply: ["nullable", "numeric", "between:0,10"])
        imdbVotes: Int @rules(apply: ["nullable", "integer"])
    ): Movie @field(resolver: "App\\GraphQL\\Mutations\\MovieMutator@update")
}

enum MovieType {
    movie
    series
    episode
}

type Movie {
    imdbID: ID!
    type: String
    released: String
    year: Int
    poster: String
    genre: String
    runtime: String
    country: String
    imdbRating: Float
    imdbVotes: Int
    ratings: [Rating]
}

type Rating {
    source: String
    value: String
}
